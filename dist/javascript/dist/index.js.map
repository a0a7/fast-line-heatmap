{"version":3,"file":"index.js","sources":["../src/wasm-loader.ts","../src/index.ts"],"sourcesContent":["/**\r\n * WASM module initialization utilities\r\n */\r\n\r\n/**\r\n * Initialize fastgeotoolkit with automatic WASM loading\r\n * This is a convenience function that handles WASM loading automatically\r\n */\r\nexport async function initWithWasm(): Promise<any> {\r\n  try {\r\n    // Use eval to make the import completely dynamic and avoid bundler resolution issues\r\n    const importFunc = new Function('path', 'return import(path)');\r\n    const wasmModule = await importFunc('fastgeotoolkit/wasm');\r\n    \r\n    // Initialize the WASM module\r\n    if (typeof wasmModule.default === 'function') {\r\n      await wasmModule.default();\r\n    }\r\n    \r\n    return wasmModule;\r\n  } catch (error) {\r\n    throw new Error(`Failed to initialize WASM module: ${error}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Load WASM from URL\r\n */\r\nexport async function loadWasmFromUrl(wasmJsUrl: string, wasmBgUrl?: string): Promise<any> {\r\n  try {\r\n    const response = await fetch(wasmJsUrl);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch WASM JS module: ${response.status}`);\r\n    }\r\n    \r\n    const moduleText = await response.text();\r\n    const moduleBlob = new Blob([moduleText], { type: 'application/javascript' });\r\n    const moduleUrl = URL.createObjectURL(moduleBlob);\r\n    \r\n    const wasmModule = await import(/* @vite-ignore */ moduleUrl);\r\n    \r\n    if (wasmBgUrl) {\r\n      await wasmModule.default(wasmBgUrl);\r\n    } else {\r\n      await wasmModule.default();\r\n    }\r\n    \r\n    URL.revokeObjectURL(moduleUrl);\r\n    \r\n    return wasmModule;\r\n  } catch (error) {\r\n    throw new Error(`Failed to load WASM from URL: ${error}`);\r\n  }\r\n}\r\n","/**\r\n * fastGeoToolkit - A novel high-performance geospatial analysis framework\r\n * with advanced route density mapping algorithms\r\n */\r\n\r\n// WebAssembly module import (will be bundled)\r\nlet wasmModule: any = null;\r\n\r\n// Export WASM loading utilities\r\nexport { initWithWasm, loadWasmFromUrl } from './wasm-loader.js';\r\n\r\n/**\r\n * GPS coordinate as [latitude, longitude]\r\n */\r\nexport type Coordinate = [number, number];\r\n\r\n/**\r\n * Track with frequency information for heatmap visualization\r\n */\r\nexport interface HeatmapTrack {\r\n  coordinates: Coordinate[];\r\n  frequency: number;\r\n}\r\n\r\n/**\r\n * Result of heatmap generation with route density analysis\r\n */\r\nexport interface HeatmapResult {\r\n  tracks: HeatmapTrack[];\r\n  max_frequency: number;\r\n}\r\n\r\n/**\r\n * Validation result for coordinate arrays\r\n */\r\nexport interface ValidationResult {\r\n  valid_count: number;\r\n  total_count: number;\r\n  issues: string[];\r\n}\r\n\r\n/**\r\n * Track statistics including distance and bounding box\r\n */\r\nexport interface TrackStatistics {\r\n  distance_km: number;\r\n  point_count: number;\r\n  bounding_box: [number, number, number, number]; // [min_lat, min_lng, max_lat, max_lng]\r\n  elevation_gain?: number;\r\n  average_speed?: number;\r\n}\r\n\r\n/**\r\n * File format information\r\n */\r\nexport interface FileInfo {\r\n  format: string;\r\n  track_count: number;\r\n  point_count: number;\r\n  valid: boolean;\r\n  file_size: number;\r\n}\r\n\r\n/**\r\n * Initialize the WebAssembly module\r\n * Must be called before using any WASM-based functions\r\n * @param wasmInit Pre-loaded WASM module (from loadWasm() helper)\r\n */\r\nexport async function init(wasmInit: any): Promise<void> {\r\n  if (!wasmInit) {\r\n    throw new Error('WASM module must be provided to init() function. Use loadWasm() to load it first.');\r\n  }\r\n  \r\n  wasmModule = wasmInit;\r\n}\r\n\r\n/**\r\n * Load the WASM module - users call this first, then pass result to init()\r\n * This avoids module resolution issues by using a simple approach\r\n */\r\nexport async function loadWasm(): Promise<any> {\r\n  try {\r\n    // Use Function constructor to make import completely dynamic and avoid build-time resolution\r\n    const dynamicImport = new Function('path', 'return import(path)');\r\n    let wasmModule;\r\n    \r\n    // First try: from package exports\r\n    try {\r\n      wasmModule = await dynamicImport('fastgeotoolkit/wasm');\r\n    } catch (e1) {\r\n      // Second try: relative to current module (for bundled scenario)\r\n      try {\r\n        wasmModule = await dynamicImport('./fastgeotoolkit.js');\r\n      } catch (e2) {\r\n        // Third try: from dist directory\r\n        try {\r\n          wasmModule = await dynamicImport('../dist/fastgeotoolkit.js');\r\n        } catch (e3) {\r\n          throw new Error(`Failed to import WASM module. Tried multiple paths: ${e1.message}, ${e2.message}, ${e3.message}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Initialize the WASM module\r\n    if (typeof wasmModule.default === 'function') {\r\n      await wasmModule.default();\r\n    }\r\n    \r\n    return wasmModule;\r\n  } catch (error) {\r\n    throw new Error(`Failed to load WASM module: ${error}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Internal helper to ensure WASM is initialized\r\n * Used by all exported functions that need WASM\r\n */\r\nasync function ensureWasmInitialized(): Promise<void> {\r\n  if (!wasmModule) {\r\n    try {\r\n      const wasmInit = await loadWasm();\r\n      await init(wasmInit);\r\n      console.log('WASM module initialized successfully');\r\n    } catch (error) {\r\n      console.error('Failed to initialize WASM module:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Process GPX files and generate route density heatmap\r\n * @param files Array of file data as Uint8Array\r\n * @returns Heatmap result with frequency analysis\r\n */\r\nexport async function processGpxFiles(files: Uint8Array[]): Promise<HeatmapResult> {\r\n  await ensureWasmInitialized();\r\n  const fileArray = new Array(files.length);\r\n  files.forEach((file, i) => {\r\n    fileArray[i] = file;\r\n  });\r\n  return wasmModule.process_gpx_files(fileArray);\r\n}\r\n\r\n/**\r\n * Decode Google polyline format to coordinates\r\n * @param encoded Encoded polyline string\r\n * @returns Array of coordinates\r\n */\r\nexport async function decodePolyline(encoded: string): Promise<Coordinate[]> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.decode_polyline_string(encoded);\r\n}\r\n\r\n/**\r\n * Process multiple polylines and generate heatmap\r\n * @param polylines Array of polyline strings\r\n * @returns Heatmap result\r\n */\r\nexport async function processPolylines(polylines: string[]): Promise<HeatmapResult> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.process_polylines(polylines);\r\n}\r\n\r\n/**\r\n * Validate GPS coordinates\r\n * @param coordinates Array of coordinates to validate\r\n * @returns Validation result with issues\r\n */\r\nexport async function validateCoordinates(coordinates: Coordinate[]): Promise<ValidationResult> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.validate_coordinates(coordinates);\r\n}\r\n\r\n/**\r\n * Calculate track statistics\r\n * @param coordinates Track coordinates\r\n * @returns Statistics including distance and bounding box\r\n */\r\nexport async function calculateTrackStatistics(coordinates: Coordinate[]): Promise<TrackStatistics> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.calculate_track_statistics(coordinates);\r\n}\r\n\r\n/**\r\n * Simplify track by reducing point density\r\n * @param coordinates Track coordinates\r\n * @param tolerance Simplification tolerance\r\n * @returns Simplified coordinate array\r\n */\r\nexport async function simplifyTrack(coordinates: Coordinate[], tolerance: number): Promise<Coordinate[]> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.simplify_coordinates(coordinates, tolerance);\r\n}\r\n\r\n/**\r\n * Find intersections between multiple tracks\r\n * @param tracks Array of track coordinate arrays\r\n * @param tolerance Distance tolerance for intersection detection\r\n * @returns Intersection points with track indices\r\n */\r\nexport async function findTrackIntersections(\r\n  tracks: Coordinate[][],\r\n  tolerance: number\r\n): Promise<Array<{ coordinate: Coordinate; track_indices: number[] }>> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.find_track_intersections(tracks, tolerance);\r\n}\r\n\r\n/**\r\n * Convert coordinates to GeoJSON feature\r\n * @param coordinates Track coordinates\r\n * @param properties Optional properties object\r\n * @returns GeoJSON feature\r\n */\r\nexport async function coordinatesToGeojson(\r\n  coordinates: Coordinate[],\r\n  properties: Record<string, any> = {}\r\n): Promise<any> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.coordinates_to_geojson(coordinates, properties);\r\n}\r\n\r\n/**\r\n * Export tracks to GPX format\r\n * @param tracks Array of track coordinate arrays\r\n * @param metadata Optional metadata\r\n * @returns GPX file content as string\r\n */\r\nexport async function exportToGpx(\r\n  tracks: Coordinate[][],\r\n  metadata: Record<string, any> = {}\r\n): Promise<string> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.export_to_gpx(tracks, metadata);\r\n}\r\n\r\n/**\r\n * Calculate coverage area of tracks\r\n * @param tracks Array of track coordinate arrays\r\n * @returns Coverage information including bounding box and area\r\n */\r\nexport async function calculateCoverageArea(\r\n  tracks: Coordinate[][]\r\n): Promise<{\r\n  bounding_box: [number, number, number, number];\r\n  area_km2: number;\r\n  point_count: number;\r\n}> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.calculate_coverage_area(tracks);\r\n}\r\n\r\n/**\r\n * Get file information from binary data\r\n * @param fileData File data as Uint8Array\r\n * @returns File format information\r\n */\r\nexport async function getFileInfo(fileData: Uint8Array): Promise<FileInfo> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.get_file_info(fileData);\r\n}\r\n\r\n/**\r\n * Calculate distance between two points using Haversine formula\r\n * @param lat1 First point latitude\r\n * @param lon1 First point longitude\r\n * @param lat2 Second point latitude\r\n * @param lon2 Second point longitude\r\n * @returns Distance in kilometers\r\n */\r\nexport async function calculateDistance(\r\n  lat1: number,\r\n  lon1: number,\r\n  lat2: number,\r\n  lon2: number\r\n): Promise<number> {\r\n  await ensureWasmInitialized();\r\n  return wasmModule.calculate_distance_between_points(lat1, lon1, lat2, lon2);\r\n}\r\n\r\n/**\r\n * Utilities for working with coordinates without WebAssembly\r\n */\r\nexport const utils = {\r\n  /**\r\n   * Check if coordinates are valid (basic validation)\r\n   */\r\n  isValidCoordinate(lat: number, lon: number): boolean {\r\n    return (\r\n      lat >= -90 && lat <= 90 &&\r\n      lon >= -180 && lon <= 180 &&\r\n      !(lat === 0 && lon === 0) &&\r\n      !isNaN(lat) && !isNaN(lon) &&\r\n      isFinite(lat) && isFinite(lon)\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Calculate simple distance using Haversine formula (JavaScript implementation)\r\n   */\r\n  haversineDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLon = (lon2 - lon1) * Math.PI / 180;\r\n    const lat1Rad = lat1 * Math.PI / 180;\r\n    const lat2Rad = lat2 * Math.PI / 180;\r\n\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n              Math.cos(lat1Rad) * Math.cos(lat2Rad) *\r\n              Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return R * c;\r\n  },\r\n\r\n  /**\r\n   * Calculate bounding box for coordinate array\r\n   */\r\n  getBoundingBox(coordinates: Coordinate[]): [number, number, number, number] {\r\n    if (coordinates.length === 0) {\r\n      return [0, 0, 0, 0];\r\n    }\r\n\r\n    let minLat = coordinates[0][0];\r\n    let maxLat = coordinates[0][0];\r\n    let minLon = coordinates[0][1];\r\n    let maxLon = coordinates[0][1];\r\n\r\n    for (const [lat, lon] of coordinates) {\r\n      minLat = Math.min(minLat, lat);\r\n      maxLat = Math.max(maxLat, lat);\r\n      minLon = Math.min(minLon, lon);\r\n      maxLon = Math.max(maxLon, lon);\r\n    }\r\n\r\n    return [minLat, minLon, maxLat, maxLon];\r\n  }\r\n};\r\n"],"names":[],"mappings":"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"}