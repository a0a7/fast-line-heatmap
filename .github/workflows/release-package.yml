name: "fastGeoToolkit Multi-Language Release"

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  # Build and test all packages
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: cargo install wasm-pack
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin build twine
      
      - name: Sync packages
        run: ./scripts/sync_packages.sh
      
      - name: Build Rust package
        run: |
          cd dist/rust
          cargo build --release
          cargo test
      
      - name: Build WASM for JavaScript
        run: |
          cd core
          wasm-pack build --target web --out-dir ../dist/javascript/wasm
      
      - name: Build JavaScript package
        run: |
          cd dist/javascript
          npm install
          npm run build
          npm test
      
      - name: Build Python package
        run: |
          cd dist/python
          maturin build --release

  # Publish Rust package to crates.io
  publish-rust:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      
      - name: Sync packages
        run: ./scripts/sync_packages.sh
      
      - name: Publish to crates.io
        run: |
          cd dist/rust
          cargo publish --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Publish JavaScript package to NPM and GitHub Packages
  publish-javascript:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: cargo install wasm-pack
      
      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      
      - name: Sync packages and build WASM
        run: |
          ./scripts/sync_packages.sh
          cd core
          wasm-pack build --target web --out-dir ../dist/javascript/wasm
      
      - name: Build JavaScript package
        run: |
          cd dist/javascript
          npm install
          npm run build
      
      - name: Publish to NPM
        run: |
          cd dist/javascript
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/
      
      - name: Publish to GitHub Packages
        run: |
          cd dist/javascript
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish Python package to PyPI
  publish-python:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin build twine
      
      - name: Sync packages
        run: ./scripts/sync_packages.sh
      
      - name: Build and publish Python package
        run: |
          cd dist/python
          maturin publish
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}