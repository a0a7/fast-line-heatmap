name: "release package on all platforms"

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  # Build and test all packages
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: cargo install wasm-pack
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin build twine
      
      - name: Sync packages
        run: ./scripts/sync_packages.sh
      
      - name: Build Rust package
        run: |
          cd dist/rust
          cargo build --release
          cargo test
      
      - name: Build WASM for JavaScript
        run: |
          cd core
          wasm-pack build --target web --out-dir ../dist/javascript/wasm
      
      - name: Build JavaScript package
        run: |
          cd dist/javascript
          npm install
          npm run build
          npm test
      
      - name: Build Python package
        run: |
          cd dist/python
          maturin build --release

  # Publish Rust package to crates.io
  publish-rust:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Sync packages
        run: ./scripts/sync_packages.sh
      
      - name: Publish to crates.io
        run: |
          cd dist/rust
          cargo publish --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Publish JavaScript package to NPM and GitHub Packages
  publish-javascript:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: cargo install wasm-pack
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: dist/javascript/package-lock.json
      
      - name: Sync packages and build WASM
        run: |
          ./scripts/sync_packages.sh
          cd core
          wasm-pack build --target web --out-dir ../dist/javascript/wasm
      
      - name: Install JavaScript dependencies
        run: |
          cd dist/javascript
          npm ci
      
      - name: Build and test JavaScript package
        run: |
          cd dist/javascript
          npm run build
          npm test
      
      # Publish to npm registry
      - name: Setup npm authentication
        run: |
          cd dist/javascript
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
      
      - name: Prepare package for npm
        run: |
          cd dist/javascript
          # Backup original package.json
          cp package.json package.json.backup
          # Ensure unscoped name for npm
          npm pkg set name=fastgeotoolkit
          npm pkg delete publishConfig
      
      - name: Publish to NPM
        run: |
          cd dist/javascript
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      # Publish to GitHub Packages
      - name: Setup GitHub Packages authentication
        run: |
          cd dist/javascript
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          echo "@a0a7:registry=https://npm.pkg.github.com" >> .npmrc
      
      - name: Prepare package for GitHub Packages
        run: |
          cd dist/javascript
          # Restore original and modify for GitHub Packages
          cp package.json.backup package.json
          npm pkg set name=@a0a7/fastgeotoolkit
          npm pkg set publishConfig.registry=https://npm.pkg.github.com
          npm pkg set publishConfig.access=public
      
      - name: Publish to GitHub Packages
        run: |
          cd dist/javascript
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Restore original package.json
        run: |
          cd dist/javascript
          mv package.json.backup package.json
      
      - name: Create release summary
        run: |
          echo "## ðŸ“¦ JavaScript Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published to:" >> $GITHUB_STEP_SUMMARY
          echo "- **npm**: [fastgeotoolkit](https://www.npmjs.com/package/fastgeotoolkit)" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Packages**: [@a0a7/fastgeotoolkit](https://github.com/a0a7/fastgeotoolkit/packages)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# From npm" >> $GITHUB_STEP_SUMMARY
          echo "npm install fastgeotoolkit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# From GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "npm install @a0a7/fastgeotoolkit" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Publish Python package to PyPI
  publish-python:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin build twine
      
      - name: Sync packages
        run: ./scripts/sync_packages.sh
      
      - name: Build and publish Python package
        run: |
          cd dist/python
          maturin publish
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}